#!/usr/bin/env python3
"""
Ï∑®ÏïΩÏ†ê Î∂ÑÏÑù ÌïµÏã¨ Î™®Îìà - Ïã§Ï†ú Î∂ÑÏÑù Î°úÏßÅ Íµ¨ÌòÑ (vuln_checker ÌÜµÌï©)
"""

import json
import sys
from pathlib import Path
from datetime import datetime

# vuln_checker Î™®Îìà import
try:
    from backend.vuln_checker.database_loader import load_all
    from backend.vuln_checker.cve_checker import check_vulnerabilities
    from backend.vuln_checker.evaluator import evaluate_policies
except ImportError:
    print("‚ö†Ô∏è  vuln_checker Î™®ÎìàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§. Í∏∞Î≥∏ Î°úÏßÅÏùÑ ÏÇ¨Ïö©Ìï©ÎãàÎã§.")
    load_all = None
    check_vulnerabilities = None
    evaluate_policies = None


def run_all_checks(scan_parsed_file: str = "data/mmdb/scan_parsed.json"):
    """
    Î™®Îì† Ï∑®ÏïΩÏ†ê Í≤ÄÏÇ¨ Ïã§Ìñâ (vuln_checker Î™®Îìà ÌÜµÌï©)
    
    Args:
        scan_parsed_file: Î∂ÑÏÑùÌï† Ïä§Ï∫î ÌååÏã± ÌååÏùº Í≤ΩÎ°ú
    
    Returns:
        dict: Ï∑®ÏïΩÏ†ê Î∂ÑÏÑù Í≤∞Í≥º
    """
    try:
        # 1. ÌååÏùº Ï°¥Ïû¨ Î∞è Ïú†Ìö®ÏÑ± ÌôïÏù∏
        if not Path(scan_parsed_file).exists():
            print(f"‚ùå Ïä§Ï∫î ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§: {scan_parsed_file}")
            return None
        
        file_size = Path(scan_parsed_file).stat().st_size
        if file_size == 0:
            print(f"‚ö†Ô∏è  Ïä§Ï∫î ÌååÏùºÏù¥ ÎπÑÏñ¥ÏûàÏäµÎãàÎã§: {scan_parsed_file}")
            return create_empty_result()
        
        # 2. Î™®Îì† Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î°úÎìú (vuln_checker ÌôúÏö©)
        print("üìä Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ Î°úÎìú Ï§ë...")
        
        if load_all:
            scan_data, vuln_db, eval_db = load_all(
                scan_path=scan_parsed_file,
                vuln_path="data/db/vuln_db.json",
                eval_path="data/db/eval_db.json"
            )
        else:
            # Ìè¥Î∞±: ÏßÅÏ†ë Î°úÎìú
            scan_data, vuln_db, eval_db = load_databases_fallback(scan_parsed_file)
        
        if not scan_data:
            print(f"‚ö†Ô∏è  Ïä§Ï∫î Îç∞Ïù¥ÌÑ∞Í∞Ä ÎπÑÏñ¥ÏûàÏäµÎãàÎã§")
            return create_empty_result()
        
        print(f"üìä Ïä§Ï∫î Îç∞Ïù¥ÌÑ∞ Î°úÎìú ÏôÑÎ£å: {len(scan_data)}Í∞ú Ìò∏Ïä§Ìä∏")
        
        # 3. Ï∑®ÏïΩÏ†ê Î∂ÑÏÑù Í≤∞Í≥º Ï¥àÍ∏∞Ìôî
        analysis_results = {
            "scan_summary": {
                "total_hosts": len(scan_data),
                "total_vulnerabilities": 0,
                "critical_count": 0,
                "high_count": 0,
                "medium_count": 0,
                "low_count": 0,
                "info_count": 0
            },
            "vulnerabilities": [],
            "hosts": [],
            "recommendations": [],
            "status": "completed",
            "timestamp": datetime.now().isoformat(),
            "source_file": scan_parsed_file,
            "file_size": file_size
        }
        
        # 4. CVE Í∏∞Î∞ò Ï∑®ÏïΩÏ†ê Í≤ÄÏÇ¨
        print("üîç CVE Í∏∞Î∞ò Ï∑®ÏïΩÏ†ê Í≤ÄÏÇ¨ Ï§ë...")
        cve_results = {}
        if check_vulnerabilities and vuln_db:
            cve_results = check_vulnerabilities(scan_data, vuln_db)
            print(f"   üìã CVE Í≤ÄÏÇ¨ ÏôÑÎ£å: {len(cve_results)}Í∞ú Ìò∏Ïä§Ìä∏ÏóêÏÑú Ï∑®ÏïΩÏ†ê Î∞úÍ≤¨")
        
        # 5. Î≥¥Ïïà Ï†ïÏ±Ö ÌèâÍ∞Ä (11303, 30301 Îì± Ìè¨Ìï®)
        print("üîç Î≥¥Ïïà Ï†ïÏ±Ö ÌèâÍ∞Ä Ï§ë...")
        policy_results = {}
        if evaluate_policies and eval_db:
            policy_results = evaluate_policies(scan_data, eval_db)
            print(f"   üìã Ï†ïÏ±Ö ÌèâÍ∞Ä ÏôÑÎ£å: {len(policy_results)}Í∞ú Ìò∏Ïä§Ìä∏ÏóêÏÑú Ï†ïÏ±Ö ÏúÑÎ∞ò Î∞úÍ≤¨")
        
        # 6. Ìò∏Ïä§Ìä∏Î≥Ñ Ï¢ÖÌï© Î∂ÑÏÑù Í≤∞Í≥º ÏÉùÏÑ±
        print("üìä Ï¢ÖÌï© Í≤∞Í≥º ÏÉùÏÑ± Ï§ë...")
        for ip, host_data in scan_data.items():
            print(f"  üîç Î∂ÑÏÑù Ï§ë: {ip}")
            
            host_result = {
                "ip": ip,
                "hostname": host_data.get("hostname"),
                "os": host_data.get("os"),
                "ports_count": len(host_data.get("ports", {})),
                "vulnerabilities": []
            }
            
            # CVE Í∏∞Î∞ò Ï∑®ÏïΩÏ†ê Ï∂îÍ∞Ä
            if ip in cve_results:
                cve_vulns = convert_cve_results_to_vulnerabilities(ip, cve_results[ip], host_data)
                host_result["vulnerabilities"].extend(cve_vulns)
            
            # Ï†ïÏ±Ö ÏúÑÎ∞ò Í∏∞Î∞ò Ï∑®ÏïΩÏ†ê Ï∂îÍ∞Ä
            if ip in policy_results:
                policy_vulns = convert_policy_results_to_vulnerabilities(ip, policy_results[ip], host_data)
                host_result["vulnerabilities"].extend(policy_vulns)
            
            # Í∏∞Î≥∏ Ï∑®ÏïΩÏ†ê Í≤ÄÏÇ¨ Ï∂îÍ∞Ä (Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ)
            basic_vulns = analyze_host_basic_vulnerabilities(ip, host_data)
            host_result["vulnerabilities"].extend(basic_vulns)
            
            # Ï∑®ÏïΩÏ†êÏù¥ ÏûàÎäî Ìò∏Ïä§Ìä∏Îßå Í≤∞Í≥ºÏóê Ìè¨Ìï®
            if host_result["vulnerabilities"]:
                analysis_results["hosts"].append(host_result)
                analysis_results["vulnerabilities"].extend(host_result["vulnerabilities"])
        
        # 7. Ï∑®ÏïΩÏ†ê Ïπ¥Ïö¥Ìä∏ Î∞è Í∂åÏû•ÏÇ¨Ìï≠ ÏóÖÎç∞Ïù¥Ìä∏
        update_vulnerability_counts(analysis_results)
        add_comprehensive_recommendations(analysis_results)
        
        print(f"‚úÖ Ï∑®ÏïΩÏ†ê Î∂ÑÏÑù ÏôÑÎ£å: {len(analysis_results['vulnerabilities'])}Í∞ú Ï∑®ÏïΩÏ†ê Î∞úÍ≤¨")
        
        return analysis_results
        
    except Exception as e:
        print(f"‚ùå Ï∑®ÏïΩÏ†ê Î∂ÑÏÑù Ïò§Î•ò: {e}")
        import traceback
        traceback.print_exc()
        return create_error_result("analysis_error", str(e))


def load_databases_fallback(scan_parsed_file: str):
    """Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏßÅÏ†ë Î°úÎìú (Ìè¥Î∞±)"""
    print("   üìÅ ÏßÅÏ†ë Î°úÎìú Î™®Îìú ÏÇ¨Ïö©")
    
    # Ïä§Ï∫î Îç∞Ïù¥ÌÑ∞ Î°úÎìú
    with open(scan_parsed_file, 'r', encoding='utf-8') as f:
        scan_data = json.load(f)
    
    # vuln_db Î°úÎìú
    vuln_db = {}
    vuln_db_path = "data/db/vuln_db.json"
    if Path(vuln_db_path).exists():
        with open(vuln_db_path, 'r', encoding='utf-8') as f:
            vuln_db = json.load(f)
    
    # eval_db Î°úÎìú
    eval_db = {}
    eval_db_path = "data/db/eval_db.json"
    if Path(eval_db_path).exists():
        with open(eval_db_path, 'r', encoding='utf-8') as f:
            eval_db = json.load(f)
    
    return scan_data, vuln_db, eval_db


def convert_cve_results_to_vulnerabilities(ip: str, cve_data: dict, host_data: dict) -> list:
    """CVE Í≤ÄÏÇ¨ Í≤∞Í≥ºÎ•º Ï∑®ÏïΩÏ†ê ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò"""
    vulnerabilities = []
    
    for port, port_cve_data in cve_data.items():
        product = port_cve_data.get("product", "")
        cves = port_cve_data.get("cves", [])
        
        port_info = host_data.get("ports", {}).get(port, {})
        service = port_info.get("service", "unknown")
        
        for cve in cves:
            severity = determine_cve_severity(cve)
            vulnerabilities.append({
                "rule_id": cve,
                "rule_name": "ÏïåÎ†§ÏßÑ Î≥¥Ïïà Ï∑®ÏïΩÏ†ê (CVE)",
                "host": ip,
                "port": port,
                "service": service,
                "severity": severity,
                "description": f"{product}ÏóêÏÑú ÏïåÎ†§ÏßÑ Î≥¥Ïïà Ï∑®ÏïΩÏ†êÏù¥ Î∞úÍ≤¨ÎêòÏóàÏäµÎãàÎã§.",
                "details": f"CVE: {cve}",
                "recommendation": f"{product}Î•º ÏµúÏã† Î≤ÑÏ†ÑÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏÑ∏Ïöî."
            })
    
    return vulnerabilities


def convert_policy_results_to_vulnerabilities(ip: str, policy_data: dict, host_data: dict) -> list:
    """Ï†ïÏ±Ö ÌèâÍ∞Ä Í≤∞Í≥ºÎ•º Ï∑®ÏïΩÏ†ê ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò"""
    vulnerabilities = []
    
    for rule_id, rule_data in policy_data.items():
        rule_name = rule_data.get("name", f"Í∑úÏπô {rule_id}")
        rule_desc = rule_data.get("description", "")
        violations = rule_data.get("violations", [])
        
        if violations:
            # Í∑úÏπôÎ≥Ñ Ïã¨Í∞ÅÎèÑ Îß§Ìïë
            severity = determine_rule_severity(rule_id)
            
            # Ìè¨Ìä∏ Ï†ïÎ≥¥ Ï∂îÏ∂ú (Í∞ÄÎä•Ìïú Í≤ΩÏö∞)
            port = "N/A"
            service = "system"
            
            # violationsÏóêÏÑú Ìè¨Ìä∏ Ï†ïÎ≥¥ ÌååÏã± ÏãúÎèÑ
            for violation in violations:
                if "Ìè¨Ìä∏" in violation:
                    import re
                    port_match = re.search(r'Ìè¨Ìä∏\s+(\d+)', violation)
                    if port_match:
                        port = port_match.group(1)
                        port_info = host_data.get("ports", {}).get(port, {})
                        service = port_info.get("service", "unknown")
                        break
            
            vulnerabilities.append({
                "rule_id": rule_id,
                "rule_name": rule_name,
                "host": ip,
                "port": port,
                "service": service,
                "severity": severity,
                "description": rule_desc,
                "details": "; ".join(violations),
                "recommendation": get_rule_recommendation(rule_id)
            })
    
    return vulnerabilities


def analyze_host_basic_vulnerabilities(ip: str, host_data: dict) -> list:
    """Í∏∞Î≥∏ Ï∑®ÏïΩÏ†ê Í≤ÄÏÇ¨ (Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ)"""
    vulnerabilities = []
    ports = host_data.get("ports", {})
    
    for port, port_info in ports.items():
        service = port_info.get("service", "")
        product = port_info.get("product", "")
        version = port_info.get("version", "")
        scripts = port_info.get("scripts", {})
        
        # Ï†ëÍ∑ºÌÜµÏ†ú ÎØ∏Ìù° (20501)
        if service == "ftp":
            ftp_anon = scripts.get("ftp-anon", "")
            if "Anonymous FTP login allowed" in ftp_anon:
                vulnerabilities.append({
                    "rule_id": "20501",
                    "rule_name": "Ï†ëÍ∑ºÌÜµÏ†ú ÎØ∏Ìù°",
                    "host": ip,
                    "port": port,
                    "service": service,
                    "severity": "high",
                    "description": "FTP ÏÑúÎπÑÏä§ÏóêÏÑú ÏùµÎ™Ö Ï†ëÏÜçÏù¥ ÌóàÏö©ÎêòÏñ¥ ÏûàÏäµÎãàÎã§.",
                    "details": ftp_anon.strip(),
                    "recommendation": "FTP ÏùµÎ™Ö Ï†ëÏÜçÏùÑ ÎπÑÌôúÏÑ±ÌôîÌïòÍ≥† Ïù∏Ï¶ùÎêú ÏÇ¨Ïö©ÏûêÎßå Ï†ëÍ∑ºÌï† Ïàò ÏûàÎèÑÎ°ù ÏÑ§Ï†ïÌïòÏÑ∏Ïöî."
                })
        
        elif service == "telnet":
            vulnerabilities.append({
                "rule_id": "20501",
                "rule_name": "Ï†ëÍ∑ºÌÜµÏ†ú ÎØ∏Ìù°",
                "host": ip,
                "port": port,
                "service": service,
                "severity": "high",
                "description": "Î≥¥ÏïàÏù¥ Ï∑®ÏïΩÌïú Telnet ÏÑúÎπÑÏä§Í∞Ä Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§.",
                "details": "TelnetÏùÄ ÏïîÌò∏ÌôîÎêòÏßÄ ÏïäÏùÄ ÌîÑÎ°úÌÜ†ÏΩúÏûÖÎãàÎã§.",
                "recommendation": "TelnetÏùÑ ÎπÑÌôúÏÑ±ÌôîÌïòÍ≥† SSHÎ•º ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî."
            })
        
        # Ï∑®ÏïΩÌïú ÏÑúÎπÑÏä§ (20503)
        insecure_services = {
            21: "ftp", 23: "telnet", 513: "rlogin",
            79: "finger", 7: "echo", 9: "discard", 69: "tftp"
        }
        
        port_num = int(port)
        if port_num in insecure_services and service == insecure_services[port_num]:
            severity = "high" if service in ["telnet", "rlogin"] else "medium"
            vulnerabilities.append({
                "rule_id": "20503",
                "rule_name": "Í∏∞Î≥∏Ìè¨Ìä∏ ÏÇ¨Ïö© Î∞è Ï∑®ÏïΩÌïú ÏÑúÎπÑÏä§ Ïö¥Ïö©",
                "host": ip,
                "port": port,
                "service": service,
                "severity": severity,
                "description": f"Î≥¥ÏïàÏù¥ Ï∑®ÏïΩÌïú {service} ÏÑúÎπÑÏä§Í∞Ä Í∏∞Î≥∏ Ìè¨Ìä∏ {port}ÏóêÏÑú Ïã§Ìñâ Ï§ëÏûÖÎãàÎã§.",
                "details": f"{service} ÏÑúÎπÑÏä§Îäî Î≥¥ÏïàÏÉÅ Ï∑®ÏïΩÌï©ÎãàÎã§.",
                "recommendation": f"{service} ÏÑúÎπÑÏä§Î•º ÎπÑÌôúÏÑ±ÌôîÌïòÍ≥† Î≥¥Ïïà ÎåÄÏïàÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî."
            })
        
        # Î≤ÑÏ†Ñ Ï†ïÎ≥¥ ÎÖ∏Ï∂ú (30802)
        if version and version.strip():
            vulnerabilities.append({
                "rule_id": "30802", 
                "rule_name": "Î≤ÑÏ†ÑÏ†ïÎ≥¥ ÎÖ∏Ï∂ú",
                "host": ip,
                "port": port,
                "service": service,
                "severity": "low",
                "description": f"{service} ÏÑúÎπÑÏä§ÏóêÏÑú Î≤ÑÏ†Ñ Ï†ïÎ≥¥Í∞Ä ÎÖ∏Ï∂úÎêòÍ≥† ÏûàÏäµÎãàÎã§.",
                "details": f"{product} {version}",
                "recommendation": "ÏÑúÎπÑÏä§ Î∞∞ÎÑàÏóêÏÑú Î≤ÑÏ†Ñ Ï†ïÎ≥¥Î•º Ïà®Í∏∞ÎèÑÎ°ù ÏÑ§Ï†ïÌïòÏÑ∏Ïöî."
            })
    
    return vulnerabilities


def determine_cve_severity(cve: str) -> str:
    """CVE Ïã¨Í∞ÅÎèÑ ÌåêÏ†ï - Î™®Îì† CVEÎ•º CriticalÎ°ú ÏÑ§Ï†ï"""
    return "critical"


def determine_rule_severity(rule_id: str) -> str:
    """Í∑úÏπôÎ≥Ñ Ïã¨Í∞ÅÎèÑ Îß§Ìïë"""
    severity_map = {
        # Ï†ëÍ∑ºÌÜµÏ†ú Í¥ÄÎ†® - ÎÜíÏùÄ ÏúÑÌóò
        "20501": "high",  # Ï†ëÍ∑ºÌÜµÏ†ú ÎØ∏Ìù°
        "20502": "high",  # SSH ÏïΩÌïú Ïù∏Ï¶ù
        "20503": "high",  # Ï∑®ÏïΩÌïú ÏÑúÎπÑÏä§
        
        # Í¥ÄÎ¶¨ Í¥ÄÎ†® - Ï§ëÍ∞Ñ ÏúÑÌóò
        "11303": "medium",  # Í¥ÄÎ¶¨ÎåÄÏû• ÎàÑÎùΩ
        "30301": "medium",  # ÎÑ§Ìä∏ÏõåÌÅ¨ Í¥ÄÎ¶¨ÎåÄÏû•
        "30501": "medium",  # Î∂àÌïÑÏöîÌïú ÏÑúÎπÑÏä§
        "30601": "medium",  # SNMP Î≥¥Ïïà
        "40101": "high",   # Ìå®Ïπò Í¥ÄÎ¶¨
        
        # Ï†ïÎ≥¥ÎÖ∏Ï∂ú Í¥ÄÎ†® - ÎÇÆÏùÄ ÏúÑÌóò
        "30802": "low",    # Î≤ÑÏ†ÑÏ†ïÎ≥¥ ÎÖ∏Ï∂ú
        "30701": "medium", # Ïõπ ÏÑúÎ≤Ñ Î≥¥Ïïà
    }
    
    return severity_map.get(rule_id, "medium")


def get_rule_recommendation(rule_id: str) -> str:
    """Í∑úÏπôÎ≥Ñ Í∂åÏû•ÏÇ¨Ìï≠"""
    recommendations = {
        "11303": "Î™®Îì† ÏûêÏÇ∞Í≥º ÏÑúÎπÑÏä§Ïóê ÎåÄÌï¥ Í¥ÄÎ¶¨ÎåÄÏû•ÏùÑ ÏûëÏÑ±ÌïòÍ≥† Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî.",
        "30301": "Î¨ºÎ¶¨Ï†Å/ÎÖºÎ¶¨Ï†Å Ïó∞Í≤∞ Ïû•ÎπÑÏùò MAC Ï£ºÏÜåÎ•º ÏãùÎ≥ÑÌïòÍ≥† ÏûêÏÇ∞ Îì±Î°ùÏùÑ Ï≤†Ï†ÄÌûà ÌïòÏÑ∏Ïöî.",
        "20501": "ÏÑúÎπÑÏä§ Ï†ëÍ∑º Ïãú Ïù∏Ï¶ùÏ≤¥Í≥ÑÎ•º Ï†ÅÏö©ÌïòÍ≥† Í∏∞Î≥∏ Í≥ÑÏ†ï Î∞è ÏùµÎ™Ö Ï†ëÍ∑ºÏùÑ Ï†úÌïúÌïòÏÑ∏Ïöî.",
        "20502": "SSH Î£®Ìä∏ Î°úÍ∑∏Ïù∏ÏùÑ ÎπÑÌôúÏÑ±ÌôîÌïòÍ≥† ÌÇ§ Í∏∞Î∞ò Ïù∏Ï¶ùÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.",
        "20503": "Î≥¥ÏïàÏÑ±Ïù¥ ÎÇÆÏùÄ ÏÑúÎπÑÏä§Î•º ÏÇ¨Ïö©ÌïòÏßÄ ÏïäÍ±∞ÎÇò, VPN ÎÇ¥ÏóêÏÑú ÏÇ¨Ïö©ÌïòÎ©∞ SSH Îì± Î≥¥Ïïà ÎåÄÏ≤¥ ÏàòÎã®ÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.",
        "30501": "ÏóÖÎ¨¥Ïóê ÌïÑÏöîÌïòÏßÄ ÏïäÏùÄ ÏÑúÎπÑÏä§Îäî Ï§ëÏßÄÌïòÍ≥† ÌïÑÏöîÌïú ÏÑúÎπÑÏä§Îßå Ïö¥ÏòÅÌïòÏÑ∏Ïöî.",
        "30601": "SNMP Ïª§ÎÆ§ÎãàÌã∞ Ïä§Ìä∏ÎßÅÏùÑ Î≥ÄÍ≤ΩÌïòÍ≥† ÏùΩÍ∏∞ Ï†ÑÏö©ÏúºÎ°ú ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.",
        "30701": "Ïõπ ÏÑúÎ≤Ñ Î≥¥Ïïà ÏÑ§Ï†ïÏùÑ Í∞ïÌôîÌïòÍ≥† Î∂àÌïÑÏöîÌïú Í∏∞Îä•ÏùÑ ÎπÑÌôúÏÑ±ÌôîÌïòÏÑ∏Ïöî.",
        "30802": "ÏÑúÎπÑÏä§ Î∞∞ÎÑà, Ïò§Î•ò Î©îÏãúÏßÄ Îì±ÏùÑ ÌÜµÌï¥ Î≤ÑÏ†Ñ Ï†ïÎ≥¥Í∞Ä ÎÖ∏Ï∂úÎêòÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.",
        "40101": "Ï†ïÍ∏∞Ï†ÅÏù∏ Î≥¥Ïïà Ìå®Ïπò Ï†ÅÏö© Î∞è Ìå®Ïπò Í¥ÄÎ¶¨ Ï†ïÏ±ÖÏùÑ ÏàòÎ¶ΩÌïòÏÑ∏Ïöî."
    }
    
    return recommendations.get(rule_id, "Ìï¥Îãπ Ï∑®ÏïΩÏ†êÏóê ÎåÄÌïú Î≥¥Ïïà Ï°∞ÏπòÎ•º ÏàòÌñâÌïòÏÑ∏Ïöî.")


def update_vulnerability_counts(analysis_results: dict):
    """Ï∑®ÏïΩÏ†ê Ïã¨Í∞ÅÎèÑÎ≥Ñ Ïπ¥Ïö¥Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏"""
    summary = analysis_results["scan_summary"]
    
    # Ïã¨Í∞ÅÎèÑÎ≥Ñ Ïπ¥Ïö¥Ìä∏ Ï¥àÍ∏∞Ìôî
    counts = {"critical": 0, "high": 0, "medium": 0, "low": 0, "info": 0}
    
    # Ï∑®ÏïΩÏ†ê Ïã¨Í∞ÅÎèÑÎ≥Ñ Ïπ¥Ïö¥Ìä∏
    for vuln in analysis_results["vulnerabilities"]:
        severity = vuln.get("severity", "info").lower()
        if severity in counts:
            counts[severity] += 1
        else:
            counts["info"] += 1
    
    # Í≤∞Í≥º ÏóÖÎç∞Ïù¥Ìä∏
    summary.update({
        "critical_count": counts["critical"],
        "high_count": counts["high"], 
        "medium_count": counts["medium"],
        "low_count": counts["low"],
        "info_count": counts["info"],
        "total_vulnerabilities": len(analysis_results["vulnerabilities"])
    })


def add_comprehensive_recommendations(analysis_results: dict):
    """Ï¢ÖÌï© Í∂åÏû•ÏÇ¨Ìï≠ Ï∂îÍ∞Ä"""
    vulns = analysis_results["vulnerabilities"]
    recommendations = set()
    
    # Î∞úÍ≤¨Îêú Ï∑®ÏïΩÏ†ê Ïú†ÌòïÎ≥Ñ Í∂åÏû•ÏÇ¨Ìï≠
    rule_types = set(vuln.get("rule_id", "")[:3] for vuln in vulns)  # Ï≤´ 3ÏûêÎ¶¨Î°ú Î∂ÑÎ•ò
    
    for vuln in vulns:
        rule_id = vuln.get("rule_id", "")
        
        # CVE Í¥ÄÎ†®
        if rule_id.startswith("CVE"):
            recommendations.add("ÏãúÏä§ÌÖúÍ≥º Ïï†ÌîåÎ¶¨ÏºÄÏù¥ÏÖòÏùÑ ÏµúÏã† Î≤ÑÏ†ÑÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏÑ∏Ïöî.")
            recommendations.add("Ï†ïÍ∏∞Ï†ÅÏù∏ Î≥¥Ïïà Ìå®Ïπò Ï†ÅÏö© Ï†ïÏ±ÖÏùÑ ÏàòÎ¶ΩÌïòÏÑ∏Ïöî.")
        
        # Ï†ëÍ∑ºÌÜµÏ†ú Í¥ÄÎ†® (205xx)
        elif rule_id.startswith("205"):
            recommendations.add("ÏùµÎ™Ö Ï†ëÏÜçÏùÑ ÎπÑÌôúÏÑ±ÌôîÌïòÍ≥† Í∞ïÎ†•Ìïú Ïù∏Ï¶ù Ï†ïÏ±ÖÏùÑ Ï†ÅÏö©ÌïòÏÑ∏Ïöî.")
            recommendations.add("Í∏∞Î≥∏ Í≥ÑÏ†ïÏùò Ìå®Ïä§ÏõåÎìúÎ•º Î≥ÄÍ≤ΩÌïòÍ±∞ÎÇò ÎπÑÌôúÏÑ±ÌôîÌïòÏÑ∏Ïöî.")
            recommendations.add("Î≥¥ÏïàÏù¥ Ï∑®ÏïΩÌïú ÏÑúÎπÑÏä§Î•º ÎπÑÌôúÏÑ±ÌôîÌïòÍ≥† Î≥¥Ïïà ÎåÄÏïàÏùÑ ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî.")
        
        # ÏÑúÎπÑÏä§ Í¥ÄÎ¶¨ Í¥ÄÎ†® (305xx)
        elif rule_id.startswith("305"):
            recommendations.add("Î∂àÌïÑÏöîÌïú ÎÑ§Ìä∏ÏõåÌÅ¨ ÏÑúÎπÑÏä§Î•º Ï§ëÏßÄÌïòÏÑ∏Ïöî.")
        
        # Ï†ïÎ≥¥ÎÖ∏Ï∂ú Í¥ÄÎ†® (308xx)
        elif rule_id.startswith("308"):
            recommendations.add("ÏÑúÎπÑÏä§ Î∞∞ÎÑàÏóêÏÑú Î≤ÑÏ†Ñ Ï†ïÎ≥¥Î•º Ïà®Í∏∞ÎèÑÎ°ù ÏÑ§Ï†ïÌïòÏÑ∏Ïöî.")
        
        # Í¥ÄÎ¶¨ÎåÄÏû• Í¥ÄÎ†® (113xx, 303xx)
        elif rule_id.startswith("113") or rule_id.startswith("303"):
            recommendations.add("ÏûêÏÇ∞ Í¥ÄÎ¶¨ÎåÄÏû•ÏùÑ ÏûëÏÑ±ÌïòÍ≥† Ï†ïÍ∏∞Ï†ÅÏúºÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ÌïòÏÑ∏Ïöî.")
    
    # ÏùºÎ∞òÏ†ÅÏù∏ Í∂åÏû•ÏÇ¨Ìï≠
    if recommendations:
        recommendations.add("Ï†ïÍ∏∞Ï†ÅÏù∏ Î≥¥Ïïà Ï†êÍ≤ÄÏùÑ ÏàòÌñâÌïòÏÑ∏Ïöî.")
        recommendations.add("ÎÑ§Ìä∏ÏõåÌÅ¨ Ï†ëÍ∑º Ï†úÏñ¥ Ï†ïÏ±ÖÏùÑ Í≤ÄÌÜ†ÌïòÏÑ∏Ïöî.")
        recommendations.add("Î≥¥Ïïà Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏä§ÌÖúÏùÑ Íµ¨Ï∂ïÌïòÍ≥† Ïö¥ÏòÅÌïòÏÑ∏Ïöî.")
    else:
        recommendations.add("ÌòÑÏû¨ ÏãúÏä§ÌÖúÏù¥ ÏïàÏ†ÑÌïòÍ≤å ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏäµÎãàÎã§.")
        recommendations.add("ÏßÄÏÜçÏ†ÅÏù∏ Î≥¥Ïïà Î™®ÎãàÌÑ∞ÎßÅÏùÑ Ïú†ÏßÄÌïòÏÑ∏Ïöî.")
    
    analysis_results["recommendations"] = list(recommendations)


def create_empty_result():
    """Îπà Í≤∞Í≥º ÏÉùÏÑ±"""
    return {
        "scan_summary": {
            "total_hosts": 0,
            "total_vulnerabilities": 0,
            "critical_count": 0,
            "high_count": 0,
            "medium_count": 0,
            "low_count": 0,
            "info_count": 0
        },
        "vulnerabilities": [],
        "hosts": [],
        "recommendations": ["Ïä§Ï∫î Í≤∞Í≥ºÎ•º ÌôïÏù∏ÌïòÏó¨ Ï∑®ÏïΩÏ†êÏùÑ Î∂ÑÏÑùÌïòÏÑ∏Ïöî."],
        "status": "empty_scan_data",
        "timestamp": datetime.now().isoformat()
    }


def create_error_result(status: str, error_msg: str):
    """Ïò§Î•ò Í≤∞Í≥º ÏÉùÏÑ±"""
    return {
        "scan_summary": {"total_hosts": 0, "total_vulnerabilities": 0, "critical_count": 0, "high_count": 0, "medium_count": 0, "low_count": 0, "info_count": 0},
        "vulnerabilities": [],
        "hosts": [],
        "recommendations": ["ÏãúÏä§ÌÖú ÏÑ§Ï†ïÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌïòÏÑ∏Ïöî."],
        "status": status,
        "error": error_msg,
        "timestamp": datetime.now().isoformat()
    }


# Í∏∞Ï°¥ Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú ÎûòÌçº Ìï®Ïàò
def run_all_checks_legacy():
    """Í∏∞Ï°¥ ÏΩîÎìú Ìò∏ÌôòÏÑ±ÏùÑ ÏúÑÌïú ÎûòÌçº Ìï®Ïàò"""
    return run_all_checks("data/mmdb/scan_parsed.json")


if __name__ == "__main__":
    # ÌÖåÏä§Ìä∏ Ïã§Ìñâ
    result = run_all_checks()
    if result:
        print(f"\nüìä Î∂ÑÏÑù Í≤∞Í≥º:")
        print(f"   Ï¥ù Ìò∏Ïä§Ìä∏: {result['scan_summary']['total_hosts']}")
        print(f"   Ï¥ù Ï∑®ÏïΩÏ†ê: {result['scan_summary']['total_vulnerabilities']}")
        print(f"   Ïã¨Í∞Å ÏúÑÌóò: {result['scan_summary']['critical_count']}")
        print(f"   ÎÜíÏùÄ ÏúÑÌóò: {result['scan_summary']['high_count']}")
        print(f"   Ï§ëÍ∞Ñ ÏúÑÌóò: {result['scan_summary']['medium_count']}")
        print(f"   ÎÇÆÏùÄ ÏúÑÌóò: {result['scan_summary']['low_count']}")
        
        if result['vulnerabilities']:
            print(f"\nüîç Î∞úÍ≤¨Îêú Ï∑®ÏïΩÏ†ê:")
            for vuln in result['vulnerabilities'][:5]:  # Ï≤òÏùå 5Í∞úÎßå ÌëúÏãú
                print(f"   - [{vuln['rule_id']}] {vuln['rule_name']} ({vuln['severity']})")